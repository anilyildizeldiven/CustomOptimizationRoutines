import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.utils import to_categorical

# Load dataset
file_path = '/iris.csv' # Replace with your actual file path
data = pd.read_csv(file_path)

# Preprocess data
X = data.iloc[:, 0:4].values
y = data.iloc[:, 4].values

# Encode class values as integers
encoder = LabelEncoder()
encoder.fit(y)
encoded_Y = encoder.transform(y)

# Convert integers to dummy variables (i.e. one hot encoded)
dummy_y = to_categorical(encoded_Y)

# Split the dataset into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, 
                                                    dummy_y, 
                                                    test_size=0.2, 
                                                    random_state=42)

#Model function is called by fit() for every batch of data
# keras model class: https://keras.io/api/models/model/    
###change so there is only one batch

# Create model
model = Sequential()
model.add(Dense(8, input_shape=(4,), activation='relu'))
model.add(Dense(3, activation='softmax'))




#tf.keras.optimizers
    #modules: experimental, legacy, schedules
    #classes
    #functions:
        #deserialize(...): Inverse of the serialize function.
        #get(...): Retrieves a Keras Optimizer instance.
        #serialize(...): Serialize the optimizer configuration to JSON compatible python dict.
    
    #Optimizers: https://keras.io/api/optimizers/
    #An optimizer is one of the two arguments required for compiling a Keras model:
    #You can either instantiate an optimizer before passing it to model.compile() , or you can pass it by its string identifier. In the latter case, the default parameters for the optimizer will be used.
    ###When writing a custom training loop, you would retrieve gradients via a tf.GradientTape instance, then call optimizer.apply_gradients() to update your weights:

# Compile model
model.compile(loss='categorical_crossentropy',#Loss function. May be a string (name of loss function), or a tf.keras.losses.Loss instance. 
              optimizer=tf.keras.optimizers.Adam(learning_rate=0.001),#String (name of optimizer) or optimizer instance.
              metrics=['accuracy'],#List of metrics to be evaluated by the model during training and testing. Each of this can be a string (name of a built-in function), function or a tf.keras.metrics.Metric instance. 
              loss_weights=None,# Optional list or dictionary specifying scalar coefficients (Python floats) to weight the loss contributions of different model outputs.
              weighted_metrics=None,#List of metrics to be evaluated and weighted by sample_weight or class_weight during training and testing.
              run_eagerly=False,# Bool. If True, this Model's logic will not be wrapped in a tf.function. 
              steps_per_execution=None,#Int or 'auto'. The number of batches to run during each tf.function call. If set to "auto", keras will automatically tune steps_per_execution during runtime. 
              jit_compile=None,#If True, compile the model training step with XLA. XLA is an optimizing compiler for machine learning.
              pss_evaluation_shards=0 # Integer or 'auto'. Used for tf.distribute.ParameterServerStrategy training only. This arg sets the number of shards to split the dataset into, to enable an exact visitation guarantee for evaluation, meaning the model will be applied to each dataset element exactly once, even if workers fail. 
              )


# Train model
model.fit(X_train, 
          y_train, 
          batch_size=10, # Integer or None. Number of samples per gradient update. If unspecified, batch_size will default to 32. Do not specify the batch_size if your data is in the form of datasets, generators, or keras.utils.Sequence instances (since they generate batches).
          epochs=150, # Integer. Number of epochs to train the model. An epoch is an iteration over the entire x and y data provided (unless the steps_per_epoch flag is set to something other than None).
          verbose=1, # 'auto', 0, 1, or 2. Verbosity mode. 0 = silent, 1 = progress bar, 2 = one line per epoch. 'auto' becomes 1 for most cases, but 2 when used with ParameterServerStrategy. 
          callbacks=None, #List of keras.callbacks.Callback instances. List of callbacks to apply during training. See tf.keras.callbacks. 
          validation_split=0.2, #Float between 0 and 1. Fraction of the training data to be used as validation data. 
          validation_data=None, #Data on which to evaluate the loss and any model metrics at the end of each epoch. 
          shuffle=True, #Boolean (whether to shuffle the training data before each epoch) or str (for 'batch'). This argument is ignored when x is a generator or an object of tf.data.Dataset. 'batch' is a special option for dealing with the limitations of HDF5 data; it shuffles in batch-sized chunks. Has no effect when steps_per_epoch is not None.
          class_weight=None,#Optional dictionary mapping class indices (integers) to a weight (float) value, used for weighting the loss function (during training only). 
          sample_weight=None,#Optional Numpy array of weights for the training samples, used for weighting the loss function (during training only). Y
          initial_epoch=0,#Integer. Epoch at which to start training (useful for resuming a previous training run).
          steps_per_epoch=None,#Integer or None. Total number of steps (batches of samples) before declaring one epoch finished and starting the next epoch. 
          validation_steps=None,#Only relevant if validation_data is provided and is a tf.data dataset. Total number of steps (batches of samples) to draw before stopping when performing validation at the end of every epoch. If 'validation_steps' is None, validation will run until the validation_data dataset is exhausted.
          validation_batch_size=None,#Integer or None. Number of samples per validation batch. If unspecified, will default to batch_size. Do not specify the validation_batch_size if your data is in the form of datasets, generators, or keras.utils.Sequence instances (since they generate batches).
          validation_freq=1,#Only relevant if validation data is provided. Integer or collections.abc.Container instance (e.g. list, tuple, etc.). 
          max_queue_size=10,# Integer. Used for generator or keras.utils.Sequence input only. Maximum size for the generator queue. If unspecified, max_queue_size will default to 10.
          workers=1,#Integer. Used for generator or keras.utils.Sequence input only. Maximum number of processes to spin up when using process-based threading. If unspecified, workers will default to 1.
          use_multiprocessing=False #Boolean. Used for generator or keras.utils.Sequence input only. If True, use process-based threading. If unspecified, use_multiprocessing will default to False. 
          )


# Evaluate the model
scores = model.evaluate(X_test, 
                        y_test,
                        batch_size=None, #Integer or None. Number of samples per batch of computation. If unspecified, batch_size will default to 32. 
                        verbose="auto", #"auto", 0, 1, or 2. Verbosity mode. 0 = silent, 1 = progress bar, 2 = single line. "auto" becomes 1 for most cases, and to 2 when used with ParameterServerStrategy. 
                        sample_weight=None, #Optional Numpy array of weights for the test samples, used for weighting the loss function.
                        steps=None, # Integer or None. Total number of steps (batches of samples) before declaring the evaluation round finished. Ignored with the default value of None. 
                        callbacks=None, #List of keras.callbacks.Callback instances. List of callbacks to apply during evaluation. See callbacks.
                        max_queue_size=10, #Integer. Used for generator or keras.utils.Sequence input only. Maximum size for the generator queue. If unspecified, max_queue_size will default to 10.
                        workers=1, # Integer. Used for generator or keras.utils.Sequence input only. Maximum number of processes to spin up when using process-based threading. If unspecified, workers will default to 1
                        use_multiprocessing=False, #Boolean. Used for generator or keras.utils.Sequence input only. If True, use process-based threading. If unspecified, use_multiprocessing will default to False. 
                        return_dict=False #If True, loss and metric results are returned as a dict, with each key being the name of the metric. If False, they are returned as a list.
                        )
print(f"Accuracy: {scores[1]*100}")












### subclass model.fit()
    ###change input size so batch_size = full size
    ###override train_step via GradientTape https://keras.io/guides/customizing_what_happens_in_fit/
        ###inherit compile w/o optimizer
        ###build optimizer into new train_step
            ###Hessian via advanced autodiff/jacobi: https://www.tensorflow.org/guide/advanced_autodiff#hessian
        ###write unit tests
        
###check if it runs correctly via auto tests in GitHub & add sub-classes to Newton Method


###Helpful links:
    #https://jermwatt.github.io/machine_learning_refined/notes/4_Second_order_methods/4_4_Newtons.html
    #https://mmcryptogem.medium.com/training-a-neural-network-using-newtons-method-d02da8843133
    #https://keras.io/getting_started/intro_to_keras_for_engineers/
    
        
    
    
    
    
    
    
    
    
    
    
    
    
    
    
